import React from 'react';
import '@testing-library/jest-dom';
import {shallow} from 'enzyme';
import MultipleCustomHooks from '../../../components/03-examples/MultipleCustomHooks';
import useFetch from '../../../hooks/useFetch';
import useCounter from '../../../hooks/useCounter';
jest.mock('../../../hooks/useFetch');
jest.mock('../../../hooks/useCounter');

beforeEach( () => {
    useCounter.mockReturnValue({
        counter: 10,
        increment: () => {}
    })
})

describe('Pruebas en <MultipleCustomHooks/>', () => {

    test('Debe mostrarse correctamente', () => {

        useFetch.mockReturnValue({
            data: null,
            loading: true,
            error: null,
        });

        const wrapper = shallow(<MultipleCustomHooks />);
        expect(wrapper).toMatchSnapshot();

    });    

    test('Debe mostrar la informaciÃ³n', () => {

        useFetch.mockReturnValue({
            data: [{
                author: 'Max',
                quote: 'jsjsjs',
            }],
            loading: false,
            error: null,
        });

        const wrapper = shallow(<MultipleCustomHooks />);
        expect(wrapper.find('.alert').exists()).toBe(false);
        expect(wrapper.find('.mb-3').text().trim()).toBe('jsjsjs');
        expect(wrapper.find('footer').text().trim()).toBe('Max');

    });
    

});