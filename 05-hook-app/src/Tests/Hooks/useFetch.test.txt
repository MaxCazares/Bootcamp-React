import {renderHook} from '@testing-library/react-hooks';
import '@testing-library/jest-dom';
import useFetch from '../../hooks/useFetch';

describe('Pruebas en useFetch', () => {

    const url = `https://www.breakingbadapi.com/api/quotes/1`

    test('Debe regresar el valor por defecto', () => {
        
        const {result} = renderHook(() => useFetch(url));
        const {data, loading, error} = result.current;

        expect(data).toBe(null);
        expect(loading).toBe(true);
        expect(error).toBe(null);

    });    

    test('Debe de tener la info deseada', async () => {
        
        const {result, waitForNextUpdate} = renderHook(() => useFetch(url));
        await waitForNextUpdate({timeout: 2000});

        const {data, loading, error} = result.current;

        expect(data.length).toBe(1);
        expect(loading).toBe(false);
        expect(error).toBe(null);

    }); 

    test('Debe de manejar el error', async () => {
        
        const {result, waitForNextUpdate} = renderHook(() => useFetch('https://reqres.in/apid/users?page=2'));
        await waitForNextUpdate({timeout: 2000});

        const {data, loading, error} = result.current;
        
        expect(data).toBe(null);
        expect(loading).toBe(false);
        expect(error).toBe('No se pudo cargar la informaci√≥n');

    });

});